[agent]
  # wiki: https://docs.influxdata.com/telegraf/v1/glossary/#flush-interval
  # input interval (how often to fetch current data from reader)
  interval = "${DATA_FETCH_INTERVAL}"
  round_interval = true
  metric_batch_size = 1000
  # if influxdb is not available, save up to 100k entries, until it's reachable again
  metric_buffer_limit = 100000
  collection_jitter = "0s"
  # flush to influxdb every x seconds. Should be higher than input interval
  flush_interval = "${DATA_PUSH_INTERVAL}"
  flush_jitter = "0s"
  precision = ""

  ## Logging configuration:
  debug = true
  quiet = false
  logfile = ""
  hostname = ""

  # we don't care about which container/pc fetched the data. Setting this to false will include a "host" field in the data
  omit_hostname = true

[[inputs.http]]
  # currently, the docker container does not support mdns, so we're using the IP
  urls = ["http://${SMART_METER_READER_IP}/cm?cmnd=Status%2010"]

  method = "GET"
  interval = "1s" 
  data_format = "json_v2"
  
  tagexclude = ["url"]

  [[inputs.http.json_v2]]
    measurement_name = "energy"
    [[inputs.http.json_v2.object]]
      optional = false
      path = "${SMART_METER_DATA_JSON_PATH}"
      tags = ["meter_number"]
      fields = {"E_in" = "E_in", "E_out" = "E_out", "Power" = "Power"}

[[inputs.modbus]]
  name = "SolarEdge modbus/tcp"
  name_override = "energy_ems"
  slave_id = 1
  timeout = "1s"
  busy_retries = 3
  busy_retries_wait = "1s"
  controller = "tcp://192.168.0.196:1502"

  configuration_type = "register"
  #exclude_register_type_tag = true

  holding_registers = [
    { name = "prod_power_raw", byte_order = "AB",   data_type = "INT16", scale=1.0,  address = [83]},
    { name = "prod_power_factor", byte_order = "AB",   data_type = "INT16", scale=1.0,  address = [84]},

    { name = "net_power_raw", byte_order = "AB",   data_type = "INT16", scale=1.0,  address = [206]},
    { name = "net_power_factor", byte_order = "AB",   data_type = "INT16", scale=1.0,  address = [210]},

    { name = "storage_power", byte_order = "CDAB",   data_type = "FLOAT32-IEEE", scale=1.0,  address = [57716, 57717]},
  ]

[[processors.starlark]]
  namepass = ["energy_ems"]
  tagexclude = ["slave_id", "type"]
  source = '''
load("math.star", "math")

def apply(metric):
    if "prod_power_raw" in metric.fields and "prod_power_factor" in metric.fields:
        prod_power_raw = metric.fields["prod_power_raw"]
        prod_power_factor = metric.fields["prod_power_factor"]
        metric.fields["prod_power"] = prod_power_raw * math.pow(10, prod_power_factor)
        #if metric.fields["prod_power"] < 0:
            #fail("Invalid production value.")
        metric.fields.pop("prod_power_raw")
        metric.fields.pop("prod_power_factor")

        net_power_raw = metric.fields["net_power_raw"]
        net_power_factor = metric.fields["net_power_factor"]
        metric.fields["net_power"] = net_power_raw * math.pow(10, net_power_factor)
        metric.fields.pop("net_power_raw")
        metric.fields.pop("net_power_factor")
    else:
        fail("Missing values.")
    return metric
  '''


      
[[outputs.influxdb_v2]]	
  urls = ["http://${INFLUXDB_ADDRESS}"]
  token = "${INFLUX_W_TOKEN}"
  organization = "${DOCKER_INFLUXDB_INIT_ORG}"
  bucket = "${DOCKER_INFLUXDB_INIT_BUCKET}"

  # don't verify certificate as we're running on our own container
  insecure_skip_verify = true

# for debugging, can uncomment the following lines
# [[outputs.file]]
#   files = ["stdout"]